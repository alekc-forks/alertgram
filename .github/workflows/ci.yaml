name: CI

on: [push, pull_request]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    # Execute the checks inside the container instead the VM.
    container: golangci/golangci-lint:v1.34.1-alpine
    steps:
      - uses: actions/checkout@v1
      - run: golangci-lint run -E goimports

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.15
      - run: make ci-test

  release-image:
    if: startsWith(github.ref, 'refs/tags/')
    env:
      TAG_IMAGE_LATEST: "true"
      PROD_IMAGE_NAME: ${GITHUB_REPOSITORY}
      #PROD_IMAGE_NAME: docker.pkg.github.com/${GITHUB_REPOSITORY}/app
      #PROD_IMAGE_NAME: registry.gitlab.com/${GITHUB_REPOSITORY}
    needs: [check, test]
    name: Release image
    runs-on: ubuntu-latest
    # Only run in master and when has a tag.
    steps:
      - run: echo "VERSION=${GITHUB_REF#refs/*/}" >> ${GITHUB_ENV} # Sets VERSION env var.
      - uses: actions/checkout@v2
      - name: Build image
        run: make build-image
      - name: Docker login
        run: docker login ${DOCKER_HOST} -u ${DOCKER_USER} -p ${DOCKER_TOKEN}
        env:
          # DockerHub.
          DOCKER_HOST: ""
          DOCKER_USER: slok
          DOCKER_TOKEN: ${{secrets.DOCKER_HUB_TOKEN}}
          ## Github.
          # DOCKER_HOST: docker.pkg.github.com
          # DOCKER_TOKEN: ${{secrets.GITHUB_TOKEN}}
          # DOCKER_USER: ${GITHUB_ACTOR}
          ## Gitlab.
          # DOCKER_HOST: registry.gitlab.com
          # DOCKER_USER: slok
          # DOCKER_TOKEN: ${{secrets.GITLAB_TOKEN}}

      - name: Publish image
        run: make publish-image
